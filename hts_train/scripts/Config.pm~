#!/usr/bin/perl
# ----------------------------------------------------------------- #
#           The HMM-Based Speech Synthesis System (HTS)             #
#           developed by HTS Working Group                          #
#           http://hts.sp.nitech.ac.jp/                             #
# ----------------------------------------------------------------- #
#                                                                   #
#  Copyright (c) 2001-2008  Nagoya Institute of Technology          #
#                           Department of Computer Science          #
#                                                                   #
#                2001-2008  Tokyo Institute of Technology           #
#                           Interdisciplinary Graduate School of    #
#                           Science and Engineering                 #
#                                                                   #
# All rights reserved.                                              #
#                                                                   #
# Redistribution and use in source and binary forms, with or        #
# without modification, are permitted provided that the following   #
# conditions are met:                                               #
#                                                                   #
# - Redistributions of source code must retain the above copyright  #
#   notice, this list of conditions and the following disclaimer.   #
# - Redistributions in binary form must reproduce the above         #
#   copyright notice, this list of conditions and the following     #
#   disclaimer in the documentation and/or other materials provided #
#   with the distribution.                                          #
# - Neither the name of the HTS working group nor the names of its  #
#   contributors may be used to endorse or promote products derived #
#   from this software without specific prior written permission.   #
#                                                                   #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND            #
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,       #
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF          #
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE          #
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS #
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,          #
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED   #
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,     #
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON #
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,   #
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY    #
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE           #
# POSSIBILITY OF SUCH DAMAGE.                                       #
# ----------------------------------------------------------------- #

# Settings ==============================
$spkr = 'slt';
$data = 'cmu_us_arctic';
$qnum = '001';
$ver  = '1';

@SET        = ('cmp','dur');
@cmp        = ('mgc','lf0');
@dur        = ('dur');
$ref{'cmp'} = \@cmp;
$ref{'dur'} = \@dur;

%vflr = ('mgc' => '0.01', # variance floors
         'lf0' => '0.01',
         'dur' => '0.01');

%thr  = ('mgc' => '000',  # minimum state occupancy 
         'lf0' => '000',
         'dur' => '000');

%mdlf = ('mgc' => '1.0',  # tree size control param. for MDL
         'lf0' => '1.0',
         'dur' => '1.0');

%mocc = ('mgc' => '10.0',  # minimum occupancy counts
         'lf0' => '10.0',
         'dur' => ' 5.0');

%gam  = ('mgc' => '000',  # stats load threshold
         'lf0' => '000',
         'dur' => '000');

%t2s  = ('mgc' => 'cmp',  # feature type to mmf conversion
         'lf0' => 'cmp',
         'dur' => 'dur');

%strb = ('mgc' => '1',  # stream start
         'lf0' => '2',
         'dur' => '1');

%stre = ('mgc' => '1',  # stream end
         'lf0' => '4',
         'dur' => '5');

%msdi = ('mgc' => '0',  # msd information
         'lf0' => '1',
         'dur' => '0');

%strw = ('mgc' => '1.0',  # stream weights
         'lf0' => '1.0',
         'dur' => '1.0');

%ordr = ('mgc' => '25',  # feature order  
         'lf0' => '1',
         'dur' => '5');

%nwin = ('mgc' => '3',  # number of windows
         'lf0' => '3',
         'dur' => '0');

%nblk = ('mgc' => '3',   # number of blocks for transforms
         'lf0' => '1',
         'dur' => '1');

%band = ('mgc' => '2',   # band width for transforms
         'lf0' => '0',
         'dur' => '0');

#%mdcp = ('dy' => 'd',   # model copy
#         'A'  => 'a',
#         'I'  => 'i',
#         'U'  => 'u',
#         'E'  => 'e',
#         'O'  => 'o');


# Speech Analysis/Synthesis Setting ==============
# speech analysis
$sr = 16000;   # sampling rate (Hz)
$fs = 80;      # frame period (point) 
$fw = 0.42;    # frequency warping
$gm = 1;   # pole/zero representation weight
$ul = 1;   # use MGC-LSPs instead of MGC coefficients
$lg = 1;   # use log gain instead of linear gain
$bs = 0;   # 1: big endian, 0: little endian
$fr = $fs/$sr; # frame period (sec)

# speech synthesis
$pf = 1.4;     # postfiltering factor
$fl = 4096;    # length of impulse response
$co = 2047;    # order of cepstrum to approximate mel-generalized cepstrum


# Modeling/Generation Setting ==============
# modeling
$nState = 5;                # number of states
$nIte   = 5;                # number of iterations for embedded training 
$beam   = '1500 100 5000';  # initial, inc, and upper limit of beam width
$maxdev = 10;                # max standard dev coef to control HSMM maximum duration
$mindur = 5;                # min state duration to be evaluated  
$wf     = 3;                # mixture weight flooring

# generation
$maxEMiter  = 20;      # max EM iteration
$EMepsilon  = 0.0001;  # convergence factor for EM iteration
$useGV      = 0;       # turn on GV
$maxGViter  = 50;      # max GV iteration
$GVepsilon  = 0.0001;  # convergence factor for GV iteration
$minEucNorm = 0.01;    # minimum Euclid norm for GV iteration 
$stepInit   = 1.0;     # initial step size
$stepInc    = 1.2;     # step size acceleration factor
$stepDec    = 0.5;     # step size deceleration factor
$hmmWeight  = 1.0;     # weight for HMM output prob.
$gvWeight   = 1.0;     # weight for GV output prob.
$optKind    = 'NEWTON'; # optimization method (STEEPEST, NEWTON, or LBFGS)




# Directories & Commands ===============
# project directories
$prjdir = '/home/yfhao/hts_demo/HTS-DEMO';

# HTS commands
$HCOMPV = '/usr/local/HTS-2.1/bin//HCompV';
$HINIT  = '/usr/local/HTS-2.1/bin//HInit';
$HREST  = '/usr/local/HTS-2.1/bin//HRest';
$HEREST = '/usr/local/HTS-2.1/bin//HERest';
$HHED   = '/usr/local/HTS-2.1/bin//HHEd';
$HMGENS = '/usr/local/HTS-2.1/bin//HMGenS';
$ENGINE = '/usr/local/bin//hts_engine';

# SPTK commands
$X2X         = '/home/yfhao/tools/festival/build/SPTK/bin//x2x';
$FREQT       = '/home/yfhao/tools/festival/build/SPTK/bin//freqt';
$C2ACR       = '/home/yfhao/tools/festival/build/SPTK/bin//c2acr';
$VOPR        = '/home/yfhao/tools/festival/build/SPTK/bin//vopr';
$MC2B        = '/home/yfhao/tools/festival/build/SPTK/bin//mc2b';
$SOPR        = '/home/yfhao/tools/festival/build/SPTK/bin//sopr';
$B2MC        = '/home/yfhao/tools/festival/build/SPTK/bin//b2mc';
$LSP2LPC     = '/home/yfhao/tools/festival/build/SPTK/bin//lsp2lpc';
$MGC2MGC     = '/home/yfhao/tools/festival/build/SPTK/bin//mgc2mgc';
$MERGE       = '/home/yfhao/tools/festival/build/SPTK/bin//merge';
$BCP         = '/home/yfhao/tools/festival/build/SPTK/bin//bcp';
$LSPCHECK    = '/home/yfhao/tools/festival/build/SPTK/bin//lspcheck';
$MGC2SP      = '/home/yfhao/tools/festival/build/SPTK/bin//mgc2sp';
$INTERPOLATE = '/home/yfhao/tools/festival/build/SPTK/bin//interpolate';
$DFS         = '/home/yfhao/tools/festival/build/SPTK/bin//dfs';

# SoX (to add RIFF header)
$SOX = ':';

# MATLAB & STRAIGHT
$MATLAB   = ': -nodisplay -nosplash -nojvm';
$STRAIGHT = '';


# Switch ================================
$MKEMV = 1;  # preparing environments
$HCMPV = 1;  # computing a global variance
$IN_RE = 1;  # initialization & reestimation
$MMMMF = 1;  # making a monophone mmf
$ERST0 = 1;  # embedded reestimation (monophone)
$MN2FL = 1;  # copying monophone mmf to fullcontext one
$ERST1 = 1;  # embedded reestimation (fullcontext)
$CXCL1 = 1;  # tree-based context clustering 
$ERST2 = 1;  # embedded reestimation (clustered)
$UNTIE = 1;  # untying the parameter sharing structure
$ERST3 = 1;  # embedded reestimation (untied)
$CXCL2 = 1;  # tree-based context clustering 
$ERST4 = 1;  # embedded reestimation (re-clustered)
$MKUN1 = 1;  # making unseen models (1mix)
$PGEN1 = 1;  # generating speech parameter sequences (1mix)
$WGEN1 = 1;  # synthesizing waveforms (1mix)
$CONVM = 0;  # converting mmfs to the hts_engine file format
$ENGIN = 0;  # synthesizing waveforms using hts_engine
$UPMIX = 1;  # increasing the number of mixture components (1mix -> 2mix)
$SEMIT = 1;  # semi-tied covariance matrices
$MKUNS = 1;  # making unseen models (stc)
$PGENS = 1;  # generating speech parameter sequences (stc)
$WGENS = 1;  # synthesizing waveforms (stc)
$ERST5 = 1;  # embedded reestimation (2mix)
$MKUN2 = 1;  # making unseen models (2mix)
$PGEN2 = 1;  # generating speech parameter sequences (2mix)
$WGEN2 = 1;  # synthesizing waveforms (2mix)

1;
